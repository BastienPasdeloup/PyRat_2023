#####################################################################################################################################################
######################################################################## INFO #######################################################################
#####################################################################################################################################################

"""
    This program contains all the unit tests for the functions developed in the program "tutorial.py".
"""

#####################################################################################################################################################
###################################################################### IMPORTS ######################################################################
#####################################################################################################################################################

# Standard imports
import unittest
import numpy
import sys
import os

# Import the program to be tested
sys.path.append(os.path.join("..", "programs"))
from tutorial import *

#####################################################################################################################################################
############################################################### VARIABLES & CONSTANTS ###############################################################
#####################################################################################################################################################

# Let's consider the following maze for our tests
"""
#############################################################
# (0)       # (1)      # (2)       # (3)       # (4)        #
#           #          #           #           #            #
#           #          #           #           #            #
#############################################################
# (5)       ⵗ (6)       ⵗ (7)       ⵘ (8)       ⵘ (9)       #
#           ⵗ           ⵗ           6           9            #
#           ⵗ           ⵗ           ⵘ           ⵘ           #
#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#ⴾⴾⴾⴾⴾⴾ8ⴾⴾⴾⴾⴾⴾ############⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#############
# (10)      ⵗ (11)      # (12)      # (13)      # (14)      #
#           ⵗ           #           #           #           #
#           ⵗ           #           #           #           #
#ⴾⴾⴾⴾⴾⴾ9ⴾⴾⴾⴾⴾⴾ#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#ⴾⴾⴾⴾⴾⴾ6ⴾⴾⴾⴾⴾⴾ#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#
# (15)      ⵘ (16)      ⵗ (17)      ⵘ (18)      ⵗ (19)      #
#           4           ⵗ           5           ⵗ            #
#           ⵘ           ⵗ           ⵘ           ⵗ           #
#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅#
# (20)      # (21)      ⵗ (22)      # (23)      # (24)      #
#           #           ⵗ           #           #           #
#           #           ⵗ           #           #           #
#############################################################
"""

# This is a 5x5 maze
maze_width = 5

# Here is its representation as a dictionary
graph_dictionary = {5: {6: 1, 10: 1},
                    6: {5: 1, 7: 1, 11: 8},
                    7: {6: 1, 8: 6},
                    8: {7: 6, 9: 9, 13: 1},
                    9: {8: 9},
                    10: {5: 1, 11: 1, 15: 9},
                    11: {6: 8, 10: 1, 16: 1},
                    12: {17: 1},
                    13: {8: 1, 18: 6},
                    14: {19: 1},
                    15: {10: 9, 16: 4, 20: 1},
                    16: {11: 1, 15: 4, 17: 1, 21: 1},
                    17: {12: 1, 16: 1, 18: 5, 22: 1},
                    18: {13: 6, 17: 5, 19: 1, 23: 1},
                    19: {14: 1, 18: 1, 24: 1},
                    20: {15: 1},
                    21: {16: 1, 22: 1},
                    22: {17: 1, 21: 1},
                    23: {18: 1},
                    24: {19: 1}}

# Here is its representation as an adjacency matrix
graph_matrix = numpy.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 0, 0, 0, 1, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 0, 1, 0, 0, 0, 1, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]])

#####################################################################################################################################################
############################################################### UNIT TESTS DEFINITION ###############################################################
#####################################################################################################################################################

class TestsTutorial (unittest.TestCase) :

    # All tests of function "get_vertices"
    def test_get_vertices (self) :
        for graph in [graph_dictionary, graph_matrix] :
            self.assertEqual(get_vertices(graph), [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])

    # All tests of function "get_neighbors"
    def test_get_neighbors (self) :
        for graph in [graph_dictionary, graph_matrix] :
            self.assertEqual(get_neighbors(9, graph), [8])
            self.assertEqual(get_neighbors(5, graph), [6, 10])
            self.assertEqual(get_neighbors(8, graph), [7, 9, 13])
            self.assertEqual(get_neighbors(17, graph), [12, 16, 18, 22])
            self.assertRaises(Exception, get_neighbors, 25, graph)
        
        # Note the different behavior between structures when not using the function correctly (cf. comments regarding assertions in function definition)
        self.assertRaises(Exception, get_neighbors, 0, graph_dictionary)
        self.assertEqual(get_neighbors(0, graph_matrix), [])

    # All tests of function "get_weight"
    def test_get_weight (self) :
        for graph in [graph_dictionary, graph_matrix] :
            self.assertEqual(get_weight(9, 8, graph), 9)
            self.assertEqual(get_weight(17, 12, graph), 1)
            self.assertRaises(Exception, get_weight, 0, 25, graph)
            self.assertRaises(Exception, get_weight, 25, 0, graph)
        
        # Note the different behavior between structures when not using the function correctly (cf. comments regarding assertions in function definition)
        self.assertRaises(Exception, get_weight, 0, 0, graph_dictionary)
        self.assertRaises(Exception, get_weight, 0, 2, graph_dictionary)
        self.assertEqual(get_weight(0, 0, graph_matrix), 0)
        self.assertEqual(get_weight(0, 2, graph_matrix), 0)

    # All tests of function "locations_to_action"
    def test_locations_to_action (self) :
        self.assertEqual(locations_to_action(17, 12, maze_width), "north")
        self.assertEqual(locations_to_action(17, 16, maze_width), "west")
        self.assertEqual(locations_to_action(17, 18, maze_width), "east")
        self.assertEqual(locations_to_action(17, 22, maze_width), "south")
        self.assertEqual(locations_to_action(17, 17, maze_width), "nothing")
        self.assertRaises(Exception, locations_to_action, 17, 20, maze_width)

#####################################################################################################################################################
######################################################################## GO ! #######################################################################
#####################################################################################################################################################

if __name__ == "__main__" :

    # Run all unit tests
    unittest.main(verbosity=2)

#####################################################################################################################################################
#####################################################################################################################################################
